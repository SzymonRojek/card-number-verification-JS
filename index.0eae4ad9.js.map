{"mappings":"AAAA,MAAMA,EAAe,CACnBC,QAAS,iEAuBXC,EApBA,SAAkBC,GAChB,MAAMC,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAQhD,OANoBD,EAAIE,MADF,SAC6B,IAEhDC,KAAK,IACLC,MAAM,IACNC,KAAKC,GAAOC,OAAOD,KAGTE,aAAY,CAACC,EAAKC,EAAGC,KAC9B,MAAMC,EAAUC,SAASb,EAAIc,OAAOH,GAAI,IAExC,OAAQF,GAAOE,EAAI,GAAM,EAAIC,EAAUX,EAAYW,MAClD,GACD,IACA,GAAKf,OCbXkB,EAPA,SAAiCC,EAAMC,GACrC,MAAMC,EAAiC,IAAhBF,EAAKG,OAAe,EAAI,EACzCC,GAAgBH,EAAKI,MAAM,EAAGH,GAAgBf,KAAK,IAEzD,OAAOa,EAAKM,SAASF,QCEvBG,EANA,SAA4BC,GAC1B,GAAqB,iBAAVA,EACT,MAAM,IAAIC,MAAM,qCCFpB,MAAMC,EAAe,CAAE5B,QAAS,6CAMhC6B,EAJA,SAAiC3B,GAC/B,MAAO,aAAa4B,KAAK5B,IAAQ0B,GCHnC,MAAMG,EAAe,CACnB/B,QAAS,oDAUXgC,EAPA,SAA6B9B,GAC3B,MAAM+B,EAAgB/B,EAAIgC,QAAO,MAAQ,IAGzC,MAFyB,CAAC,GAAI,GAAI,IAEVV,SAASS,EAAcZ,SAAWU,GCA5D,CACE,MAAMI,EAAkBC,SAASC,cAAc,mBACzCC,EAAyBF,SAASC,cACtC,yBAEIE,EAAuBH,SAASC,cAAc,cAE9CG,EAAqB,CAAC,CAAExC,QAAS,6BAEvC,IAAIyC,EAAS,GA6Cb,SAASC,EAAeC,GACtB,MA/DJ3C,QA+DY4C,GAAaH,EAAOpB,OAAgC,GA7B9D,SAAuBnB,GACrB,MAAM2C,EAAc3C,EAAII,MAAM,IAAIC,KAAKC,GAAOC,OAAOD,KAG/CsC,EAAO,CAAC,GACRC,EAAkB,CAAC,GAAI,IAE7B,OAAQF,GACN,KAAK5B,EALY,CAAC,GAAI,GAAI,GAAI,GAAI,IAKO4B,KACtCJ,EAAOpB,QACRwB,EACA,MAAO,CAAE7C,QAAS,cACpB,KAAMiB,EAAwB6B,EAAMD,KACjCJ,EAAOpB,QACRwB,GACC5B,EAAwB6B,EAAMD,KAC5BJ,EAAOpB,QACRwB,EACF,MAAO,CAAE7C,QAAS,QACpB,KAAKiB,EAAwB8B,EAAiBF,KAC3CJ,EAAOpB,QACRwB,EACA,MAAO,CAAE7C,QAAS,oBACpB,QACE,MAAO,CAAEA,QAAS,iBAKegD,CAAcL,GAE7CM,EAAsBR,EACzBlC,KACC,EAnERP,QAmEWA,KAAc,0DAEXA,iCAIPK,KAAK,IAERkC,EAAqBW,UAAYD,EACjCX,EAAuBY,UAAaT,EAAOpB,OAAwB,GAAf,GAAGuB,IAGzD,SAASO,KA5DT,SAAoBjD,GAClBuB,EAAmBvB,GAEnB,MAAMkD,EAAmB,CACvBvB,EAAwB3B,GACxB8B,EAAoB9B,GACpBD,EAASC,IAGXuC,EAC4B,KAA1BN,EAAgBQ,MACZS,EAAiBC,QAAO,EA9BlCrD,QA8BqCA,KAAcA,IACzCwC,EAiDNc,CAAWnB,EAAgBQ,OAC3BD,EAAeP,EAAgBQ,OAGjC,SAASY,EAAaC,GACpBA,EAAMC,iBAENN,IAEAhB,EAAgBQ,MAAMe,OACtBvB,EAAgBwB,QAIHvB,SAASC,cAAc,YAE/BuB,iBAAiB,SAAUL","sources":["src/helpers/isLuhnOK.js","src/helpers/isStartingNumberCorrect.js","src/helpers/throwWhenNotString.js","src/helpers/hasOnlyNumbersAndSpaces.js","src/helpers/hasCardProperLength.js","src/js/main.js"],"sourcesContent":["const errorMessage = {\n  message: \"Probably you have typed wrong numbers - check them again!\",\n};\n\nfunction isLuhnOK(str) {\n  const luhnNumbers = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9];\n  const numberPatternReg = /\\d+/g;\n  const onlyNumbers = str.match(numberPatternReg) || [];\n  const arrNumbers = onlyNumbers\n    .join(\"\")\n    .split(\"\")\n    .map((el) => Number(el));\n\n  return (\n    arrNumbers.reduceRight((acc, _, i) => {\n      const AUX_NUM = parseInt(str.charAt(i), 10);\n\n      return (acc += i % 2 === 0 ? AUX_NUM : luhnNumbers[AUX_NUM]);\n    }, 0) %\n      10 ===\n      0 || errorMessage\n  );\n}\n\nexport default isLuhnOK;\n","function isStartingNumberCorrect(card, data) {\n  const sliceCondition = card.length === 1 ? 1 : 2;\n  const slicedNumber = +data.slice(0, sliceCondition).join(\"\");\n\n  return card.includes(slicedNumber);\n}\n\nexport default isStartingNumberCorrect;\n","function throwWhenNotString(input) {\n  if (typeof input !== \"string\") {\n    throw new Error(\"Given parameter is not a string!\");\n  }\n}\n\nexport default throwWhenNotString;\n","const errorMessage = { message: \"Password has to contain only numbers!\" };\n\nfunction hasOnlyNumbersAndSpaces(str) {\n  return /^[0-9\\s]+$/.test(str) || errorMessage;\n}\n\nexport default hasOnlyNumbersAndSpaces;\n","const errorMessage = {\n  message: \"Please write a proper length of the numbers!\",\n};\n\nfunction hasCardProperLength(str) {\n  const removedSpaces = str.replace(/\\s/g, \"\");\n  const indicatedLengths = [13, 15, 16];\n\n  return indicatedLengths.includes(removedSpaces.length) || errorMessage;\n}\n\nexport default hasCardProperLength;\n","import {\n  hasCardProperLength,\n  hasOnlyNumbersAndSpaces,\n  isLuhnOK,\n  isStartingNumberCorrect,\n  throwWhenNotString,\n} from \"../helpers\";\n\n{\n  const cardNumberInput = document.querySelector(\".js-numberInput\");\n  const additionalScoreElement = document.querySelector(\n    \".js-additionalMessage\"\n  );\n  const messageErrorsElement = document.querySelector(\".js-errors\");\n\n  const errorNumberReuired = [{ message: \"Card Number is required!\" }];\n\n  let errors = [];\n\n  function findErrors(str) {\n    throwWhenNotString(str);\n\n    const validationErrors = [\n      hasOnlyNumbersAndSpaces(str),\n      hasCardProperLength(str),\n      isLuhnOK(str),\n    ];\n\n    errors =\n      cardNumberInput.value !== \"\"\n        ? validationErrors.filter(({ message }) => message)\n        : errorNumberReuired;\n  }\n\n  function checkCardType(str) {\n    const changeToArr = str.split(\"\").map((el) => Number(el));\n\n    const mastercard = [51, 52, 53, 54, 55];\n    const visa = [4];\n    const americanExpress = [34, 37];\n\n    switch (changeToArr) {\n      case isStartingNumberCorrect(mastercard, changeToArr) &&\n        !errors.length &&\n        changeToArr:\n        return { message: \"Mastercard\" };\n      case (isStartingNumberCorrect(visa, changeToArr) &&\n        !errors.length &&\n        changeToArr) ||\n        (isStartingNumberCorrect(visa, changeToArr) &&\n          !errors.length &&\n          changeToArr):\n        return { message: \"Visa\" };\n      case isStartingNumberCorrect(americanExpress, changeToArr) &&\n        !errors.length &&\n        changeToArr:\n        return { message: \"American Express\" };\n      default:\n        return { message: \"Not correct!\" };\n    }\n  }\n\n  function renderMessages(value) {\n    const { message } = !errors.length ? checkCardType(value) : \"\";\n\n    const messageErrorsToHTML = errors\n      .map(\n        ({ message }) => `\n          <li class=\"form__list-error\">\n            ${message}\n          </li>\n        `\n      )\n      .join(\"\");\n\n    messageErrorsElement.innerHTML = messageErrorsToHTML;\n    additionalScoreElement.innerHTML = !errors.length ? `${message}` : \"\";\n  }\n\n  function render() {\n    findErrors(cardNumberInput.value);\n    renderMessages(cardNumberInput.value);\n  }\n\n  function onFormSubmit(event) {\n    event.preventDefault();\n\n    render();\n\n    cardNumberInput.value.trim();\n    cardNumberInput.focus();\n  }\n\n  function init() {\n    const form = document.querySelector(\".js-form\");\n\n    form.addEventListener(\"submit\", onFormSubmit);\n  }\n\n  init();\n}\n"],"names":["$15755e8838aea527$var$errorMessage","message","$15755e8838aea527$export$2e2bcd8739ae039","str","luhnNumbers","match","join","split","map","el","Number","reduceRight","acc","_","i","AUX_NUM","parseInt","charAt","$81fa0b489be0cc1e$export$2e2bcd8739ae039","card","data","sliceCondition","length","slicedNumber","slice","includes","$d47c1cd6fee9d87c$export$2e2bcd8739ae039","input","Error","$6ae5904f152f0283$var$errorMessage","$6ae5904f152f0283$export$2e2bcd8739ae039","test","$d04161243af1f042$var$errorMessage","$d04161243af1f042$export$2e2bcd8739ae039","removedSpaces","replace","cardNumberInput","document","querySelector","additionalScoreElement","messageErrorsElement","errorNumberReuired","errors","$54b47fc030b7b21e$var$renderMessages","value","message1","changeToArr","visa","americanExpress","$54b47fc030b7b21e$var$checkCardType","messageErrorsToHTML","innerHTML","$54b47fc030b7b21e$var$render","validationErrors","filter","$54b47fc030b7b21e$var$findErrors","$54b47fc030b7b21e$var$onFormSubmit","event","preventDefault","trim","focus","addEventListener"],"version":3,"file":"index.0eae4ad9.js.map"}